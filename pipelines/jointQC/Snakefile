#!/usr/bin/env python3

import pandas as pd

path_table = pd.read_csv("../path_table.csv", index_col=False)
LIBRARIES = list(set(path_table['library']))
MODELS_2D = ['gmm__rna_umis__rna_fraction_mitochondrial', 'gmm__rna_umis__atac_hqaa', 'gmm__rna_umis__atac_tss_enrichment', 'gmm__rna_umis__rna_exon_to_full_gene_body_ratio']
MODELS_3D = ['gmm__rna_umis__rna_fraction_mitochondrial__atac_tss_enrichment', 'gmm__rna_umis__rna_fraction_mitochondrial__rna_exon_to_full_gene_body_ratio']

def get_filepath(library, path_type):
    return path_table[(path_table['library'] == library) & (path_table['path_type'] == path_type)]['path'].tolist()[0]


#path_table[(path_table['library'] == '10965-VD-2') & (path_table['path_type'] == 'starsolo_dir')]
#get_filepath('10965-VD-2', 'starsolo_dir')

rule all:
    input: 
        #expand("results/droplet_utils/{library}/barcodes_nuclei.txt", library = LIBRARIES),
        #expand("results/joint_qc_gmm/{library}/gmm_rna_umis__atac_hqaa_bestfit.csv", library = LIBRARIES),
        expand("results/joint_qc_gmm/{library}/{model}_bestfit_viz.png", library = LIBRARIES, model = MODELS_2D),
        expand("results/joint_qc_gmm/{library}/{model}_bestfit_viz.png", library = LIBRARIES, model = MODELS_3D),
        #expand("results/joint_qc_gmm/{library}/{model}_bestfit_viz.png", library = '10965-VD-2', model = 'gmm__rna_umis__rna_fraction_mitochondrial')


rule droplet_utils:
    input: 
    output:
        "results/droplet_utils/{library}/barcodes_empty.txt",
        "results/droplet_utils/{library}/barcodes_nuclei.txt",
    params:
        input_10x_dir = lambda wildcards: get_filepath(wildcards.library, "starsolo_dir") + "GeneFull_ExonOverIntron/raw/",
        outdir = "results/droplet_utils/{library}",
        library = "{library}"
    conda:
        "renv"
    shell:
        """
        Rscript scripts/run_dropletutils.R \
            --input_10x_dir {params.input_10x_dir} \
            --library {params.library} \
            --outdir {params.outdir}
        """

rule make_joint_qc_file:
    input:
        cellbender = lambda wildcards: get_filepath(wildcards.library, "cellbender_h5"),
        rna_metrics = lambda wildcards: get_filepath(wildcards.library, "rna_metrics"),
        atac_metrics = lambda wildcards: get_filepath(wildcards.library, "atac_metrics"),
        rna_whitelist = lambda wildcards: get_filepath(wildcards.library, "rna_whitelist"),
        atac_whitelist = lambda wildcards: get_filepath(wildcards.library, "atac_whitelist"),
    output:
        "results/joint_qc_gmm/{library}/joint_qc.csv"
    conda:
        "scanpy_cellbender"
    params:
        starsolo_dir = lambda wildcards: get_filepath(wildcards.library, "starsolo_dir"),
        outdir = "results/joint_qc_gmm/{library}/"
    shell:
        """
        python scripts/make_joint_qc_file.py \
            --cellbender {input.cellbender} \
            --rna_metrics {input.rna_metrics} \
            --atac_metrics {input.atac_metrics} \
            --rna_whitelist {input.rna_whitelist} \
            --atac_whitelist {input.atac_whitelist} \
            --starsolo_dir {params.starsolo_dir} \
            --outdir {params.outdir} 
        """

rule joint_qc_gmm:
    input:
        metrics = "results/joint_qc_gmm/{library}/joint_qc.csv",
        prefilter_barcodes = "results/droplet_utils/{library}/barcodes_nuclei.txt",
    output:
        "results/joint_qc_gmm/{library}/{model}_bestfit.csv"
    params:
        outdir = "results/joint_qc_gmm/{library}/",
        model = "{model}",
    conda:
        "scanpy_cellbender"
    shell:
        """
        python scripts/joint_qc_gmm.py \
            --metrics {input.metrics} \
            --model {params.model} \
            --prefilter_barcodes {input.prefilter_barcodes} \
            --outdir {params.outdir}
        """


rule viz:
    input:
        bestfit = "results/joint_qc_gmm/{library}/{model}_bestfit.csv",
        droplet_utils_nuclei = "results/droplet_utils/{library}/barcodes_nuclei.txt",
    output:
        "results/joint_qc_gmm/{library}/{model}_bestfit_viz.png",
    params:
        outdir = "results/joint_qc_gmm/{library}/",
        model = "{model}",
        library = "{library}",
    conda:
        "renv"
    shell:
        """
        Rscript scripts/cross_modality_qc2.R \
            --bestfit {input.bestfit} \
            --droplet_utils_nuclei {input.droplet_utils_nuclei} \
            --outdir {params.outdir} \
            --model {params.model} \
            --library {params.library}
        """

#update to cross modality script
# rule barcode_filtering:
#     input:
#         gex_qc = lambda wildcards: get_filepath(wildcards.library, "rna_metrics"),
#         droplet_utils_nuclei = "results/droplet_utils/{library}/barcodes_nuclei.txt",
#         droplet_utils_empty = "results/droplet_utils/{library}/barcodes_empty.txt",
#     output:
#         "results/barcode_filtering/{library}/barcodes_nuclei.txt",
#         "results/barcode_filtering/{library}/barcodes_empty.txt",
#     params:
#         outdir = "results/barcode_filtering/{library}",
#         library = "{library}",
#     conda:
#         "renv"
#     shell:
#         """
#         Rscript scripts/barcode_filtering_gex.R \
#             --gex_qc {input.gex_qc} \
#             --droplet_utils_nuclei {input.droplet_utils_nuclei} \
#             --droplet_utils_empty {input.droplet_utils_empty} \
#             --outdir {params.outdir} \
#             --library {params.library}
#         """

rule prepare_rna_counts:
    input:
        input_10x_dir = lambda wildcards: get_filepath(wildcards.library, "starsolo_dir") + "GeneFull_ExonOverIntron/raw/matrix.mtx",
        barcodes_nuclei = "results/barcode_filtering/{library}/barcodes_nuclei.txt",
        barcodes_empty = "results/barcode_filtering/{library}/barcodes_empty.txt",
    output:
        counts_nuclei = "results/counts_protein_coding/{library}/counts_nuclei.rds",
        counts_empty = "results/counts_protein_coding/{library}/counts_empty.rds",
    params:
        input_10x_dir = lambda wildcards: get_filepath(wildcards.library, "starsolo_dir") + "GeneFull_ExonOverIntron/raw/",
        genes_to_include = "/scratch/scjp_root/scjp0/ccrober/reference/hg38_cvb4/hg38.refGene.protein_coding_genes_CVB4.bed"
    conda:
        "renv"
    shell:
        """
        Rscript scripts/prepare_rna_counts.R \
            --input_10x_dir {params.input_10x_dir} \
            --barcodes_nuclei {input.barcodes_nuclei} \
            --barcodes_empty {input.barcodes_empty} \
            --counts_nuclei {output.counts_nuclei} \
            --counts_empty {output.counts_empty} \
            --genes_to_include {params.genes_to_include}
        """